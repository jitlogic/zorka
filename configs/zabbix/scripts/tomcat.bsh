/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__tomcat() {

  thread_util(name) {
    tbusy = zorka.jmx("java", "Catalina:type=ThreadPool,name="+name, "currentThreadsBusy");
    tmax  = zorka.jmx("java", "Catalina:type=ThreadPool,name="+name, "maxThreads");
    if (tbusy == null || tmax == null) return null;
    if (tbusy.equals(0L) || tmax.equals(0L)) return 0.0;
    return 100 * tbusy.longValue() / tmax.longValue();
  }

  // Servlets
  __servlet() {

    discovery() {
      return zabbix.discovery("java", "Catalina:j2eeType=Servlet,*", 
          "name", "WebModule", "J2EEApplication", "J2EEServer");
    }

    // Request count
    requests(server,application,module,name) {
      return zorka.jmx("java", "Catalina:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "requestCount");
    }

    // Error count
    errors(server,application,module,name) {
      return zorka.jmx("java", "Catalina:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "errorCount");
    }

    // Average processing time
    time(server,application,module,name,horizon) {
      return zorka.rate("java", "Catalina:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name,
        "processingTime", "requestCount", horizon);
    }

    return this;
  }

  servlet = __servlet();


  // JSP pages
  __jsp() {

    discovery() {
      return zabbix.discovery("java", "Catalina:j2eeType=JspMonitor,*", 
          "name", "WebModule", "J2EEApplication", "J2EEServer");
    }

    // Pages
    count(server,application,module,name) {
      return zorka.jmx("java", "Catalina:j2eeType=JspMonitor,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "jspCount");
    }

    // Reloads
    reloads(server,application,module,name) {
      return zorka.jmx("java", "Catalina:j2eeType=JspMonitor,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "jspReloadCount");
    }

    return this;
  }

  jsp = __jsp();


  if (zorka.boolCfg("tomcat.trace", false)) {

    tracer.exclude(
      spy.byClass("sun.**"),
      spy.byClass("java.**"),
      spy.byClass("javax.**"),
      spy.byClass("com.sun.**"),
      spy.byClass("com.jitlogic.zorka.**"),
      spy.byClass("org.xml.sax.**"),
      spy.byClass("org.jcp.**"),
      spy.byClass("~^\\$Proxy.*$")
    );

    tracer.include(spy.byClass("**").forTrace());

    spy.add(spy.instance()
      .onEnter(spy.fetchArg("REQ", 1), 
          spy.format("URI", "${REQ.request.requestURI}"), 
          tracer.begin("HTTP_REQ"), 
          tracer.attr("URI", "URI"))
      .include(spy.byMethod("org.apache.catalina.core.StandardEngineValve", "invoke")));

  }

  return this;

}

tomcat = __tomcat();
