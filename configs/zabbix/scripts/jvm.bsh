/**
 * Copyright 2012 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__jvm() {

  memutil(name) {
    mem_used = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "Usage", "used");
    mem_max = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "PeakUsage", "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }

  heaputil(name) {
    mem_used = zorka.jmx("java", "java.lang:type=Memory",name, "used");
    mem_max = zorka.jmx("java", "java.lang:type=Memory",name, "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }


  if (zorka.boolCfg("perfmon", false)) {

    qmpUsed = zorka.query("java", "java.lang:type=MemoryPool,*", "name").get("Usage", "used")
      .metric(perfmon.metric("MP ${name} usage", "B"));

    qmpUtil = zorka.query("java", "java.lang:type=MemoryPool,*", "name").get("Usage")
      .metric(perfmon.util("MP ${name} utilization", "%", "used", "max"));

    qgcCycles = zorka.query("java", "java.lang:type=GarbageCollector,*", "name").get("CollectionCount")
      .metric(perfmon.timedDelta("GC ${name} cycles per minute", "cycles/min").multiply(60));

    qgcUtil = zorka.query("java", "java.lang:type=GarbageCollector,*", "name").get("CollectionTime")
      .metric(perfmon.delta("GC ${name} CPU utilization", "%").multiply(0.1));

    qmhUsed = zorka.query("java", "java.lang:type=Memory").listAs("~.*MemoryUsage$", "name").get("used")
      .metric(perfmon.metric("MH ${name} usage", "B"));

    qmhUtil = zorka.query("java", "java.lang:type=Memory").listAs("~.*MemoryUsage$", "name")
      .metric(perfmon.util("MH ${name} utilization", "%", "used", "max"));

    scanner = perfmon.scanner("JVM", qmpUsed, qmpUtil, qgcCycles, qgcUtil, qmhUsed, qmhUtil);
    zorka.schedule(scanner, 10000, 10000);

  } // perfmon


  if (zorka.boolCfg("tracer", false)) {

    spy.add(spy.instance()
      .onEnter(spy.fetchArg("DN", 1), spy.fetchArg("SCOPE", 2), spy.fetchArg("FILTER", 8),
        zorka.boolCfg("tracer.verbose", false) ? tracer.begin("LDAP") : null,
        tracer.attr("DN", "DN"), tracer.attr("SCOPE", "SCOPE"), tracer.attr("FILTER", "FILTER"))
      .include(spy.byMethod("com.sun.jndi.ldap.LdapClient", "search")));

    traceSql(className, methodName, dialect) {
      spy.add(spy.instance()
        .onEnter(spy.fetchArg("SQL", 1), 
          spy.normalize("SQL", "SQL", normalizers.sql(dialect, normalizers.NORM_STD))
          trace.begin("SQL"), trace.attr("SQL", "SQL"))
        .include(spy.byInterface(spy.AC_PUBLIC, stmtClass, "execut*", null, "String")));
    }

    traceSql("java.sql.Connection", "prepare*", normalizers.DIALECT_SQL_99);

    // TODO na puste metody execute() w statementach

    traceSql("org.postgresql.core.BaseStatement", "execut*", normalizers.DIALECT_PGSQL);
    traceSql("com.ibm.db2.jcc.DB2Statement", "execut*", normalizers.DIALECT_DB2);
    // oracle, mysql, mssql, derby, hsqldb, h2

  } // tracer

  return this;
}


jvm = __jvm();
