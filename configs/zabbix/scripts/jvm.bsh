/**
 * Copyright 2012 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__jvm() {

  memutil(name) {
    mem_used = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "Usage", "used");
    mem_max = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "PeakUsage", "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }

  heaputil(name) {
    mem_used = zorka.jmx("java", "java.lang:type=Memory",name, "used");
    mem_max = zorka.jmx("java", "java.lang:type=Memory",name, "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }


  if (zorka.boolCfg("perfmon", false)) {

    qmpUsed = zorka.query("java", "java.lang:type=MemoryPool,*", "name").get("Usage", "used")
      .metric(perfmon.metric("MP ${name} usage", "B"));

    qmpUtil = zorka.query("java", "java.lang:type=MemoryPool,*", "name").get("Usage")
      .metric(perfmon.util("MP ${name} utilization", "%", "used", "max"));

    qgcCycles = zorka.query("java", "java.lang:type=GarbageCollector,*", "name").get("CollectionCount")
      .metric(perfmon.timedDelta("GC ${name} cycles per minute", "cycles/min").multiply(60));

    qgcUtil = zorka.query("java", "java.lang:type=GarbageCollector,*", "name").get("CollectionTime")
      .metric(perfmon.delta("GC ${name} CPU utilization", "%").multiply(0.1));

    qmhUsed = zorka.query("java", "java.lang:type=Memory").listAs("~.*MemoryUsage$", "name").get("used")
      .metric(perfmon.metric("MH ${name} usage", "B"));

    qmhUtil = zorka.query("java", "java.lang:type=Memory").listAs("~.*MemoryUsage$", "name")
      .metric(perfmon.util("MH ${name} utilization", "%", "used", "max"));

    scanner = perfmon.scanner("JVM", qmpUsed, qmpUtil, qgcCycles, qgcUtil, qmhUsed, qmhUtil);
    zorka.schedule(scanner, 10000, 10000);

  } // perfmon


  return this;
}


jvm = __jvm();
