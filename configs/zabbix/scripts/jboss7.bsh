/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__jboss7() {

  // Basic servlet statistics
  __servlets() {

    discovery() {
      return zabbix.discovery("java", "jboss.as:subsystem=web,*", "deployment", "servlet");
    }

    requests(deployment,servlet) {
      return zorka.jmx("java", "jboss.as:subsystem=web,deployment="+deployment+",servlet="+servlet, "requestCount");
    }

    time(deployment,servlet,horizon) {
      return zorka.rate("java", "jboss.as:subsystem=web,deployment="+deployment+",servlet="+servlet, "processingTime", "requestCount", horizon);
    }

    return this;
  }

  servlets = __servlets();

  // Basic session statistics
  __sessions() {

    discovery() {
      return zabbix.discovery("java", "jboss.as:subsystem=web,deployment=*", "deployment");
    }

    stat(deployment, attr) {
       return zorka.jmx("java", "jboss.as:subsystem=web,deployment="+deployment, attr);
    }

    return this;
  }

  sessions = __sessions();

    // Basic data source statistics
    __datasources() {
        discovery() {
            return zabbix.discovery("java", "jboss.as:subsystem=datasources,data-source=*", "data-source");
        }

        url(datasource) {
            return zorka.jmx("java", "jboss.as:subsystem=datasources,data-source="+datasource, "connectionUrl");
        }

        jndi(datasource) {
            return zorka.jmx("java", "jboss.as:subsystem=datasources,data-source="+datasource, "jndiName");
        }

        // TODO find out how to get statistics

        return this;
    }

    datasources = __datasources();


  __ejb3() {

    discovery(component) {
      return zabbix.discovery("java", "jboss.as:subsystem=ejb3,*", "deployment", "stateless-session-bean");
    }

    slsb(deployment, bean, attr) {
      return zorka.jmx("java", "jboss.as:subsystem=ejb3,deployment="+deployment+",stateless-session-bean="+bean, attr);
    }

    sls_time(deployment, bean, horiz) {
      return zorka.rate("java", "jboss.as:subsystem=ejb3,deployment="+deployment+",stateless-session-bean="+bean, 
        "executionTime", "invocations", horiz);
    }

    sls_wait(deployment, bean, horiz) {
      return zorka.rate("java", "jboss.as:subsystem=ejb3,deployment="+deployment+",stateless-session-bean="+bean, 
        "waitTime", "invocations", horiz);
    }

    return this;
  }

  ejb3 = __ejb3();



  __jpa() {

    discovery(component) {
      return zabbix.discovery("java", "jboss.as:subsystem=jpa,*", "deployment", "hibernate-persistence-unit");
    }

    hpu(deployment, unit, attr) {
      return zorka.jmx("java", "jboss.as:subsystem=jpa,deployment="+deployment+",hibernate-persistence-unit="+unit, attr);
    }

    return this;
  }

  jpa = __jpa();



  // Catch MX mbean server initialization and register JBoss MBean Server here ...

  __mbsRegister() {
    jbossMbs = null;

    process(record) {
      synchronized (super) {
        if (super.jbossMbs == null) {
          mbs = java.lang.management.ManagementFactory.getPlatformMBeanServer();
          zorka.registerMbs("java", mbs);
          super.jbossMbs = mbs;
          zorka.logInfo("Registered platform mbean server as 'java'");
        }
      }
      return record;
    }
    return this;
  }


  spy.add(spy.instance()
    .onReturn((com.jitlogic.zorka.agent.spy.SpyProcessor)__mbsRegister())
    .include(spy.byMethod(spy.AC_STATIC, "org.jboss.modules.ModuleLoader", "installMBeanServer", "void")));



  if (zorka.boolCfg("tracer", false)) {

    if (zorka.boolCfg("tracer.hires", false)) {
      tracer.setTracerMinMethodTime(1000000);
      tracer.setTracerMinTraceTime(0);
      tracer.setTracerMaxTraceRecords(4096);
    }

    tracer.exclude(
      spy.byClass("sun.**"),
      spy.byClass("java.**"),
      spy.byClass("javax.**"),
      spy.byClass("com.sun.**"),
      spy.byClass("com.jitlogic.zorka.**"),
      spy.byClass("org.xml.sax.**"),
      spy.byClass("org.jcp.**"),
      spy.byClass("~^\\$Proxy.*$"),
      spy.byClass("org.apache.xerces.**"),
      spy.byClass("org.apache.xalan.**"),
      spy.byClass("org.apache.xml.**"),
      spy.byClass("org.apache.xpath.**"),
      spy.byClass("org.w3c.**"),
      spy.byClass("org.omg.**")
    );

    tracer.include(spy.byClass("**").forTrace());

    spy.add(spy.instance()
      .onEnter(spy.fetchArg("REQ", 1),
        spy.format("URI", "${REQ.request.requestURI}"),
        tracer.begin("HTTP_REQ"),
        tracer.attr("URI", "URI"))
      .onReturn(spy.fetchArg("RESP", 2),
        spy.get("RESP", "STATUS", "response", "status"),
        zorka.boolCfg("tracer.verbose", false) ? spy.zorkaLog("INFO", "HTTP/OK", "URI=${URI} STATUS=${STATUS}") : null,
        tracer.attr("STATUS", "STATUS"))
      .onError(spy.fetchError("EX"),
        spy.format("ERR", "${EX}"),
        zorka.boolCfg("tracer.verbose", false) ? spy.zorkaLog("ERROR", "HTTP/ERROR", "URI=${URI} ERR=${ERR}") : null,
        tracer.attr("ERR", "ERR"))
      .include(spy.byMethod("org.apache.catalina.core.StandardEngineValve", "invoke")));


    tracer.output(tracer.toFile(
      zorka.stringCfg("tracer.log.path", "${zorka.log.dir}/trace.trc"),
      zorka.intCfg("tracer.log.fnum", 16),
      zorka.kiloCfg("tracer.log.size", 128*1024*1024)));


    if (zorka.hasCfg("tracer.min.method.time")) {
      mmt = zorka.longCfg("tracer.min.method.time", 250000);
      zorka.logInfo("Setting tracer minimum method time to " + mmt + " ns");
      tracer.setTracerMinMethodTime(mmt);
    }


    if (zorka.hasCfg("tracer.min.trace.time")) {
      mtt = zorka.longCfg("tracer.min.trace.time", 100);
      zorka.logInfo("Settting tracer minimum trace time to " + mtt + " ms");
      tracer.setTraceMinTraceTime(mtt);
    }


    if (zorka.hasCfg("tracer.max.trace.records")) {
      mtr = zorka.longCfg("tracer.min.trace.records", 4096);
      zorka.logInfo("Setting maximum records per trace to " + mtr + ".");
      tracer.setTraceMaxTraceRecords(mtr);
    }

  }

  return this;
}


jboss7 = __jboss7();



