/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// Common JBoss support functions

__jboss() {

  // Servlets
  __servlet() {

    discovery() {
      return zabbix.discovery("jboss", "jboss.web:j2eeType=Servlet,*",
                 "name", "WebModule", "J2EEServer", "J2EEApplication", "j2eeType");
    }

    // Request count
    requests(server,application,module,name) {
      ret = zorka.jmx("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "requestCount");
      return ret != null ? ret : 0.0;
    }

    // Error count
    errors(server,application,module,name) {
      ret = zorka.jmx("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "errorCount");
      return ret != null ? ret : 0.0;
    }

    // Average processing time
    time(server,application,module,name,horizon) {
      ret = zorka.rate("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name,
        "processingTime", "requestCount", horizon);
      return ret != null ? ret : 0.0;
    }

    return this;
  }

  servlet = __servlet();


  // Catch MX mbean server initialization and register JBoss MBean Server here ...

  __mbsRegister() {

    jbossMbs = null;
    javaMbs = null;

    process(record) {
      synchronized (super) {
        if (super.javaMbs == null) {
          mbs = java.lang.management.ManagementFactory.getPlatformMBeanServer();
          zorka.registerMbs("java", mbs);
          super.javaMbs = mbs;
          zorka.logInfo("Registered platform mbean server as 'java'");
        }
        if (super.jbossMbs == null) {
          mbs = record.get("THIS").getServer();
          //mbs = record.get("MBS");
          ccl = Thread.currentThread().getContextClassLoader();
          zorka.registerMbs("jboss", mbs, ccl);
          super.jbossMbs = mbs;
          zorka.logInfo("Registered JBoss MBean server as 'jboss'");
          if (zorka.boolCfg("jboss.dsquery", false)) {
            super.super.dsquery = __dsquery(ccl);
            zorka.logInfo("Created jboss.dsquery JDBC DataSource interface.");
          }
        }
      }
      return record;
    }
    return this;
  } // __mbsRegister()

  spy.add(spy.instance()
    .onReturn(spy.fetchArg("THIS", 0), (com.jitlogic.zorka.core.spy.SpyProcessor)__mbsRegister())
    .include(spy.byMethod(0, "org.jboss.naming.NamingService", "startService", null)));

  if (zorka.boolCfg("tracer", false)) {

    zorka.logInfo("Enabling tracer for JBoss.");
    zorka.loadCfg("tracer.properties");

    for (String pkg : zorka.listCfg("tracer.include.extra")) {
      if (pkg.contains("/")) {
        cm = pkg.split("/");
        zorka.logInfo("Include methods for trace: '" + cm[0] + "' / '" + cm[1] + "'");
        tracer.include(spy.byMethod(cm[0].trim(),cm[1].trim()));
      } else {
        zorka.logInfo("Include classes for trace: '" + pkg + "'");
        tracer.include(spy.byClass(pkg).forTrace());
      }
    }

    for (String pkg : zorka.listCfg("tracer.exclude", 
        "com.jitlogic.zorka.**",  "org.jboss.jms.client.delegate.ClientClusteredConnectionFactoryDelegate")) {
      if (pkg.contains("/")) {
        cm = pkg.split("/");
        zorka.logInfo("Exclude methods from trace: '" + cm[0] + "' / '" + cm[1] + "'");
        tracer.exclude(spy.byMethod(cm[0].trim(),cm[1].trim()));
      } else {
        zorka.logInfo("Exclude clases from trace: '" + pkg + "'");
        tracer.exclude(spy.byClass(pkg));
      }
    }

    for (String pkg : zorka.listCfg("tracer.exclude.extra")) {
      if (pkg.contains("/")) {
        cm = pkg.split("/");
        zorka.logInfo("Exclude methods from trace: '" + cm[0] + "' / '" + cm[1] + "'");
        tracer.exclude(spy.byMethod(cm[0].trim(),cm[1].trim()));
      } else {
        zorka.logInfo("Exclude clases from trace: '" + pkg + "'");
        tracer.exclude(spy.byClass(pkg));
      }
    }

    for (String pkg : zorka.listCfg("tracer.include", "**")) {
      if (pkg.contains("/")) {
        cm = pkg.split("/");
        zorka.logInfo("Include methods for trace: '" + cm[0] + "' / '" + cm[1] + "'");
        tracer.include(spy.byMethod(cm[0].trim(),cm[1].trim()));
      } else {
        zorka.logInfo("Include classes for trace: '" + pkg + "'");
        tracer.include(spy.byClass(pkg).forTrace());
      }
    }


    if (zorka.boolCfg("tracer.entry.enable", true)) {
      spy.add(spy.instance()
        .onEnter(spy.fetchArg("REQ", 1),
          spy.format("URI", "${REQ.request.requestURI}"),
          tracer.begin("HTTP_REQ"),
          zorka.boolCfg("tracer.verbose", false) ? spy.zorkaLog("INFO", "HTTP_REQ", "URI=${URI}") : null,
          tracer.attr("URI", "URI"))
        .onReturn(spy.fetchArg("RESP", 2),
          spy.get("RESP", "STATUS", "response", "status"),
          tracer.attr("STATUS", "STATUS"))
        .onError(spy.fetchError("EX"),
          spy.format("ERR", "${EX}"),
          zorka.boolCfg("tracer.verbose", false) ? spy.zorkaLog("ERROR", "HTTP/ERROR", "URI=${URI} ERR=${ERR}") : null,
          tracer.attr("ERR", "ERR"))
        .include(spy.byMethod("org.apache.catalina.core.StandardEngineValve", "invoke")));
    }

    tracer.output(tracer.toFile(
      zorka.stringCfg("tracer.log.path", "${zorka.log.dir}/trace.trc"),
      zorka.intCfg("tracer.log.fnum", 8),
      zorka.kiloCfg("tracer.log.size", 128*1024*1024)));

    if (zorka.hasCfg("tracer.min.method.time")) {
      mmt = zorka.longCfg("tracer.min.method.time", 250000);
      zorka.logInfo("Setting tracer minimum method time to " + mmt + " ns");
      tracer.setTracerMinMethodTime(mmt);
    }

    if (zorka.hasCfg("tracer.min.trace.time")) {
      mtt = zorka.longCfg("tracer.min.trace.time", 100);
      zorka.logInfo("Settting tracer minimum trace time to " + mtt + " ms");
      tracer.setTracerMinTraceTime(mtt);
    }

    if (zorka.hasCfg("tracer.max.trace.records")) {
      mtr = zorka.intCfg("tracer.max.trace.records", 4096);
      zorka.logInfo("Setting maximum records per trace to " + mtr + ".");
      tracer.setTracerMaxTraceRecords(mtr);
    }

  }

  return this;
}


jboss = __jboss();

