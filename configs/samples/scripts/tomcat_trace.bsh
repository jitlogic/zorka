/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// Sample script that configures tracer for Apache Tomcat application server.


__tracerTest() {

  // Warning: those three settings below forces tracer to save information
  // about every execution of every instrumented data !!!
  // This is for demonstration purposes BUT in production it will cause a
  // lot of strain in your application. Be sure to fine tune tracer to 
  // generate only relevant information for your application.

  tracer.setTracerMinMethodTime(50000);
  tracer.setTracerMinTraceTime(0);
  tracer.setTracerMaxTraceRecords(65536);


  tracer.exclude(
    spy.byClass("sun.**"),
    spy.byClass("java.**"),
    spy.byClass("javax.**"),
    spy.byClass("com.sun.**"),
    spy.byClass("com.jitlogic.zorka.**"),
    spy.byClass("org.xml.sax.**"),
    spy.byClass("org.jcp.**"),
    spy.byClass("~^\\$Proxy.*$")
  );


  tracer.include(spy.byClass("**").forTrace());


  spy.add(spy.instance()
    .onEnter(spy.fetchArg("REQ", 1), 
        spy.format("URI", "${REQ.request.requestURI}"), 
        tracer.begin("HTTP_REQ"), 
        tracer.attr("URI", "URI"))
    .include(spy.byMethod("org.apache.catalina.core.StandardEngineValve", "invoke")));


  //  spy.add(spy.instance()
  //    .onEnter(spy.fetchArg("CLASS", 1), tracer.attr("CLASS", "CLASS"))
  //    .include(spy.byMethod("org.apache.catalina.loader.WebappClassLoader", "loadClass")));


  query = zorka.query("java", "java.lang:type=MemoryPool,*", "name")
    .get("Usage").get("used")
    .metric(perfmon.metric("${name} memory usage.", "B"));

  scanner = perfmon.scanner("JVM", query);

  zorka.schedule(scanner, 10000, 10000);

  // Set tracer output 
  tracer.output(tracer.toFile("${zorka.log.dir}/trace.trc", 16, 8*1024*1024));

  return this;
}

tracerTest = __tracerTest();

