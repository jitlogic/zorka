/**
 * Copyright 2012 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// CAS auditing example with sending SNMP traps. In contrast to syslog and zabbix 
// we'll send structured messages, so traps will be easy to parse by standard 
// network management tools. 

__cas() {


  // We've propably stomped onto someone's namespace but this is just an example. 
  // Allocate your own unique namespace when in production.
  oid = snmp.MGMT_MIB + ".1.1";

  // Action codes (sent as oid.3)
  AUTHENTICATION = 1;
  TGT_CREATED = 2;
  TGT_DESTROYED = 3;
  SVT_GRANTED = 4;
  SVT_VALIDATED = 5;
  PROXY_GRANTED = 6;
  SVC_SAVED = 7;
  SVC_DELETED = 8;

  // Result codes (send as oid.4)
  FAILURE = 0;
  SUCCESS = 1;

  request = new ThreadLocal();
  trapper = snmp.trapper("audit", "127.0.0.1", "public", "127.0.0.1");

  audit(sdef, action) {

    // SUCCESS path ...
    sdef = sdef.onReturn().put(2, action).put(3, SUCCESS)
        .get(4, request, "remoteAddr").get(5, request, "localAddr");

    // FAILURE path ...
    sdef = sdef.onError().put(2, action).put(3, SUCCESS)
        .get(4, request, "remoteAddr").get(5, request, "localAddr");

    // Configure SNMP trap collector
    sdef = sdef.toSnmp(trapper, oid, 0,
       snmp.bind(0, snmp.OCTETSTRING, "1"), // WHO  (String)
       snmp.bind(1, snmp.OCTETSTRING, "2"), // WHAT (String)
       snmp.bind(2, snmp.INTEGER, "3"),     // ACTION (int)
       snmp.bind(3, snmp.INTEGER, "4"),     // RESULT (int)
       snmp.bind(4, snmp.IPADDRESS, "5"),   // REMOTE (ip address)
       snmp.bind(5, snmp.IPADDRESS, "6"));  // LOCAL (ip address)

    spy.add(sdef);
  }


  // Intercept request dispatcher and store request object for later use
  spy.add(spy.instance()
    .onEnter().withArguments(1).set(0, request)
    .onReturn().withArguments(1).remove(request)
    .onError().withArguments(1).remove(request)
    .include("org.jasig.cas.web.init.SafeDispatcherServlet", "service"));


  // Authentication attempts
  sdefAuth = spy.instance()
    .onReturn().withArguments(1,1)
    .onError().withArguments(1,1)
    .include("org.jasig.cas.authentication.AbstractAuthenticationManager", "authenticate");
  audit(sdefAuth, AUTHENTICATION);


  // TGT-s created
  sdefTgtCreated = spy.instance()
    .onReturn().withArguments(1).withRetVal()
    .onError().withArguments(1).withError()
    .include("org.jasig.cas.CentralAuthenticationServiceImpl", "createTicketGrantingTicket");
  audit(sdefTgtCreated, TGT_CREATED);


  // TGT-s destroyed
  sdefTgtDestroyed = spy.instance()
    .onReturn().withArguments(1,1)
    .onError().withArguments(1).withError()
    .include("org.jasig.cas.CentralAuthenticationServiceImpl", "destroyTicketGrantingTicket");
  audit(sdefTgtDestroyed, TGT_DESTROYED);


  // Service tickets granted
  sdefSvtGranted = spy.instance()
    .onReturn().withArguments(3,2).withRetVal().format(1, "service=${1} ticket=${2}")
    .onError().withArguments(3,2).withError().format(1, "service=${1} error=${2}")
    .include(1, "org.jasig.cas.CentralAuthenticationServiceImpl", "grantServiceTicket", 
        "String", "org.jasig.cas.authentication.principal.Service", 
        "org.jasig.cas.authentication.principal.Credentials");
  audit(sdefSvtGranted, SVT_GRANTED);


  // Validate service ticket
  sdefSvtValidated = spy.instance()
    .onReturn().withArguments(1,2).withRetVal().format(1, "service=${1} assertion=${2}")
    .onError().withArguments(1,2).withError().format(1, "service=${1} error=${2}")
    .include("org.jasig.cas.CentralAuthenticationServiceImpl", "validateServiceTicket");
  audit(sdefSvtValidated, SVT_VALIDATED);


  // Proxy granting ticket created
  sdefProxyGranted = spy.instance()
    .onReturn().withArguments(2,1).withRetVal().format(1, "serviceTicket=${1} proxy=${2}")
    .onError().withArguments(2,1).withError().format(1, "serviceTicket=${1} error=${2}")
    .include("org.jasig.cas.CentralAuthenticationServiceImpl", "delegateTicketGrantingTicket");
  audit(sdefProxyGranted, PROXY_GRANTED);


  // Delete a service
  sdefSvcDeleted = spy.instance()
    .onReturn().withArguments(1).format(1, "OK")
    .onError().withArguments(1).withError()
    .include("org.jasig.cas.DefaultServicesManagerImpl", "delete");
  audit(sdefSvcDeleted, SVC_DELETED);


  // Save a service
  sdefSvcSaved = spy.instance()
    .onReturn().withArguments(1).withRetVal()
    .onError().withArguments(1).withError()
    .include("org.jasig.cas.DefaultServicesManagerImpl", "save");
  audit(sdefSvcSaved, SVC_SAVED);

  return this;
}

cas = __cas();

