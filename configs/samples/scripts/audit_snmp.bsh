/**
 * Copyright 2012 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// CAS auditing example with sending SNMP traps. In contrast to syslog and zabbix 
// we'll send structured messages, so traps will be easy to parse by standard 
// network management tools. 

__cas() {


  // We've propably stomped onto someone's namespace but this is just an example. 
  // Allocate your own unique namespace when in production.
  oid = snmp.MGMT_MIB + ".1.1";

  // Action codes (sent as oid.3)
  AUTHENTICATION = 1;
  TGT_CREATED = 2;
  TGT_DESTROYED = 3;
  SVT_GRANTED = 4;
  SVT_VALIDATED = 5;
  PROXY_GRANTED = 6;
  SVC_SAVED = 7;
  SVC_DELETED = 8;

  // Result codes (send as oid.4)
  FAILURE = 0;
  SUCCESS = 1;

  request = new ThreadLocal();
  trapper = snmp.trapper("audit", "127.0.0.1", "public", "127.0.0.1");

  audit(sdef, action) {

    // Common elements
    sdef = sdef.onEnter(
      spy.put("ACTION", action),
      spy.tlGet("REMOTE", request, "remoteAddr"),
      spy.tlGet("LOCAL", request, "localAddr"));

    // SUCCESS path ...
    sdef = sdef.onReturn(spy.put("RESULT", SUCCESS));

    // FAILURE path ...
    sdef = sdef.onError(spy.put("RESULT", FAILURE));

    // Configure SNMP trap collector
    sdef = sdef.onSubmit(spy.snmpCollector(trapper, oid, 0,
       snmp.bind("WHO",    snmp.OCTETSTRING, "1"),
       snmp.bind("WHAT",   snmp.OCTETSTRING, "2"),
       snmp.bind("ACTION", snmp.INTEGER,     "3"),
       snmp.bind("RESULT", snmp.INTEGER,     "4"),
       snmp.bind("REMOTE", snmp.IPADDRESS,   "5"),
       snmp.bind("LOCAL",  snmp.IPADDRESS,   "6")));

    spy.add(sdef);
  }


  // Intercept request dispatcher and store request object for later use
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("REQ", 1), spy.tlSet("REQ", request))
    .onReturn(spy.tlRemove(request))
    .onError(spy.tlRemove(request))
    .include(spy.byMethod("org.jasig.cas.web.init.SafeDispatcherServlet", "service")));


  // Authentication attempts
  sdefAuth = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.fetchArg("WHAT", 1))
    .include(spy.byMethod("org.jasig.cas.authentication.AbstractAuthenticationManager", "authenticate"));
  audit(sdefAuth, AUTHENTICATION);


  // TGT-s created
  sdefTgtCreated = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1))
    .onReturn(spy.fetchRetVal("WHAT"))
    .onError(spy.fetchError("WHAT"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "createTicketGrantingTicket"));
  audit(sdefTgtCreated, TGT_CREATED);


  // TGT-s destroyed
  sdefTgtDestroyed = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1))
    .onReturn(spy.fetchArg("WHAT", 1))
    .onError(spy.fetchError("WHAT"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "destroyTicketGrantingTicket"));
  audit(sdefTgtDestroyed, TGT_DESTROYED);


  // Service tickets granted
  sdefSvtGranted = spy.instance()
    .onEnter(spy.fetchArg("WHO", 3), spy.fetchArg("SERVICE", 2))
    .onReturn(spy.fetchRetVal("TICKET"), spy.format("WHAT", "service=${SERVICE} ticket=${TICKET}"))
    .onError(spy.fetchError("ERROR"), spy.format("WHAT", "service=${SERVICE} error=${ERROR}"))
    .include(spy.byMethod(1, "org.jasig.cas.CentralAuthenticationServiceImpl", "grantServiceTicket", 
        "String", "org.jasig.cas.authentication.principal.Service", "org.jasig.cas.authentication.principal.Credentials"));
  audit(sdefSvtGranted, SVT_GRANTED);


  // Validate service ticket
  sdefSvtValidated = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.fetchArg("SERVICE", 2))
    .onReturn(spy.fetchRetVal("ASSERTION"), spy.format("WHAT", "service=${SERVICE} assertion=${ASSERTION}"))
    .onError(spy.fetchError("ERROR"), spy.format("WHAT", "service=${SERVICE} error=${ERROR}"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "validateServiceTicket"));
  audit(sdefSvtValidated, SVT_VALIDATED);


  // Proxy granting ticket created
  sdefProxyGranted = spy.instance()
    .onEnter(spy.fetchArg("WHO", 2), spy.fetchArg("TICKET", 1))
    .onReturn(spy.fetchRetVal("PROXY"), spy.format("WHAT", "serviceTicket=${TICKET} proxy=${PROXY}"))
    .onError(spy.fetchError("ERROR"), spy.format("WHAT", "serviceTicket=${TICKET} error=${ERROR}"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "delegateTicketGrantingTicket"));
  audit(sdefProxyGranted, PROXY_GRANTED);


  // Delete a service
  sdefSvcDeleted = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1))
    .onReturn(spy.put("WHAT", "OK"))
    .onError(spy.fetchError("WHAT"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "delete"));
  audit(sdefSvcDeleted, SVC_DELETED);


  // Save a service
  sdefSvcSaved = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1))
    .onReturn(spy.fetchRetVal("WHAT"))
    .onError(spy.fetchError("WHAT"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "save"));
  audit(sdefSvcSaved, SVC_SAVED);


  return this;
}

cas = __cas();

