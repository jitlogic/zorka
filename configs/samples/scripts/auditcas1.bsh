/**
 * Copyright 2012 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// This sample script (re)implements auditing subsystem for Jasig CAS server.
// Audit records are sent to a syslog server (instead of being stored locally).

__cas() {

  severity = syslog.S_INFO;
  facility = syslog.F_LOCAL5;
  logger = syslog.trapper("audit", "127.0.0.1", "cas");

  request = new ThreadLocal();

  // Intercept request dispatcher and store request object for later use
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("REQ", 1), spy.tlSet("REQ", request))
    .onReturn(spy.tlRemove(request))
    .onError(spy.tlRemove(request))
    .include(spy.byMethod("org.jasig.cas.web.init.SafeDispatcherServlet", "service")));


  // Authentication attempts
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("ACTION", "AUTHENTICATION_SUCCESS"))
    .onError(spy.put("ACTION", "AUTHENTICATION_FAILURE"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO}", severity, facility, "cas", "cas"))
    .include(spy.byMethod("org.jasig.cas.authentication.AbstractAuthenticationManager", "authenticate")));

  // TGT-s created
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_CREATED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_NOT_CREATED"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT}", severity, facility, "cas", "cas"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "createTicketGrantingTicket")));


  // TGT-s destroyed
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("ACTION", "TICKET_GRANTING_TICKET_DESTROYED"), spy.put("WHAT", ""))
    .onError(spy.put("ACTION", "TICKET_GRANTING_TICKET_NOT_DESTROYED"), spy.fetchError("WHAT"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT}", severity, facility, "cas", "cas"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "destroyTicketGrantingTicket")));


  // Service tickets granted
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("TGT", 1), spy.fetchArg("SERVICE", 2), spy.fetchArg("WHO", 3), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "SERVICE_TICKET_GRANTED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "SERVICE_TICKET_NOT_GRANTED"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} service=${SERVICE} tgt=${TGT} what=${WHAT}", severity, facility, "cas", "cas"))
    .include(spy.byMethod(1, "org.jasig.cas.CentralAuthenticationServiceImpl", "grantServiceTicket", "String", 
        "org.jasig.cas.authentication.principal.Service", "org.jasig.cas.authentication.principal.Credentials")));


  // Proxy granting ticket created
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("TICKET", 1), spy.fetchArg("WHO", 2), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "PROXY_GRANTING_TICKET_CREATED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "PROXY_GRANTING_TICKET_NOT_CREATED"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT} serviceTicket=${TICKET}", severity, facility, "cas", "cas"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "delegateTicketGrantingTicket")));


  // Validate service ticket
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("TICKET", 1), spy.fetchArg("SERVICE", 2), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "SERVICE_TICKET_VALIDATE_SUCCESS"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} what=${WHAT} ticket=${TICKET} service=${SERVICE}", severity, facility, "cas", "cas"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "validateServiceTicket")));


  // Delete a service
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("ID", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("RESULT", "OK"), spy.put("ACTION", "DELETE_SERVICE_SUCCESS"))
    .onError(spy.fetchError("RESULT"), spy.put("ACTION", "DELETE_SERVICE_FAILURE"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} result=${RESULT} id=${ID}", severity, facility, "cas", "cas"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "delete")));


  // Save a service
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("SERVICE", 1), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("RESULT"), spy.put("ACTION", "SAVE_SERVICE_SUCCESS"))
    .onError(spy.fetchError("RESULT"), spy.put("ACTION", "SAVE_SERVICE_FAILURE"))
    .onSubmit(spy.syslogCollector(logger, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} service=${SERVICE} result=${RESULT}", severity, facility, "cas", "cas"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "save")));

  return this;
}


cas = __cas();

