/**
 * Copyright 2012 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// CAS auditing example refactored a bit and extended to Zabbix (in addition to syslog)

__cas() {

  request = new ThreadLocal();

  syslogTrapper = syslog.trapper("audit", "127.0.0.1", zorka.getHostname(), syslog.F_AUDIT);
  zabbixTrapper = zabbix.trapper("audit", "127.0.0.1", zorka.getHostname(), "cas.audit");

  audit(sdef, expr) {
    spy.add(sdef.onSubmit(
      spy.trapperCollector(syslogTrapper, zorka.INFO, "cas", expr),
      spy.trapperCollector(zabbixTrapper, zorka.INFO, "cas", expr)
    ));
  }


  // Intercept request dispatcher and store request object for later use
  spy.add(spy.instance()
    .onEnter(spy.fetchArg("REQ", 1), spy.tlSet("REQ", request))
    .onReturn(spy.tlRemove(request))
    .onError(spy.tlRemove(request))
    .include(spy.byMethod("org.jasig.cas.web.init.SafeDispatcherServlet", "service")));

  // Authentication attempts
  sdefAuth = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("ACTION", "AUTHENTICATION_SUCCESS"))
    .onError(spy.put("ACTION", "AUTHENTICATION_FAILED"))
    .include(spy.byMethod("org.jasig.cas.authentication.AbstractAuthenticationManager", "authenticate"));


  audit(sdefAuth, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO}");


  // TGT-s created
  sdefTgtCreated = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_CREATED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_NOT_CREATED"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "createTicketGrantingTicket"));

  audit(sdefTgtCreated, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT}");


  // TGT-s destroyed
  sdefTgtDestroyed = spy.instance()
    .onEnter(spy.fetchArg("WHO", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("WHAT", ""), spy.put("ACTION", "TICKET_GRANTING_TICKET_DESTROYED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "TICKET_GRANTING_TICKET_NOT_DESTROYED"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "destroyTicketGrantingTicket"));

  audit(sdefTgtDestroyed, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT}");


  // Service tickets granted
  sdefSvcGranted = spy.instance()
    .onEnter(spy.fetchArg("TGT", 1), spy.fetchArg("SERVICE", 2), spy.fetchArg("WHO", 2), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "SERVICE_TICKET_GRANTED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "SERVICE_TICKET_NOT_GRANTED"))
    .include(spy.byMethod(1, "org.jasig.cas.CentralAuthenticationServiceImpl", "grantServiceTicket", 
        "String", "org.jasig.cas.authentication.principal.Service", "org.jasig.cas.authentication.principal.Credentials"));

  audit(sdefSvcGranted, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} service=${SERVICE} tgt=${TGT} what=${WHAT}");


  // Proxy granting ticket created
  sdefProxyGranted = spy.instance()
    .onEnter(spy.fetchArg("TICKET", 1), spy.fetchArg("WHO", 2), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "PROXY_GRANTING_TICKET_CREATED"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "PROXY_GRANTING_TICKET_NOT_CREATED"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "delegateTicketGrantingTicket"));

  audit(sdefProxyGranted, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} who=${WHO} what=${WHAT} serviceTicket=${TICKET}");


  // Validate service ticket
  sdefSvcValidate = spy.instance()
    .onEnter(spy.fetchArg("TICKET", 1), spy.fetchArg("SERVICE", 1), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("WHAT"), spy.put("ACTION", "SERVICE_TICKET_VALIDATE_SUCCESS"))
    .onError(spy.fetchError("WHAT"), spy.put("ACTION", "SERVICE_TICKET_VALIDATE_FAILURE"))
    .include(spy.byMethod("org.jasig.cas.CentralAuthenticationServiceImpl", "validateServiceTicket"));

  audit(sdefSvcValidate, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} what=${WHAT} serviceTicket=${TICKET} service=${SERVICE}");


  // Delete a service
  sdefSvcDelete = spy.instance()
    .onEnter(spy.fetchArg("ID", 1), spy.tlGet("REQ", request))
    .onReturn(spy.put("RESULT", "OK"), spy.put("ACTION", "DELETE_SERVICE_SUCCESS"))
    .onError(spy.fetchError("RESULT"), spy.put("ACTION", "DELETE_SERVICE_FAILURE"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "delete"));

  audit(sdefSvcDelete, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} result=${RESULT} id=${ID}");

  // Save a service
  sdefSvcSave = spy.instance()
    .onEnter(spy.fetchArg("SERVICE", 1), spy.tlGet("REQ", request))
    .onReturn(spy.fetchRetVal("RESULT"), spy.put("ACTION", "SAVE_SERVICE_SUCCESS"))
    .onError(spy.fetchError("RESULT"), spy.put("ACTION", "SAVE_SERVICE_FAILURE"))
    .include(spy.byMethod("org.jasig.cas.DefaultServicesManagerImpl", "save"));

  audit(sdefSvcSave, "remote=${REQ.remoteAddr} local=${REQ.localAddr} action=${ACTION} service=${SERVICE} result=${RESULT}");

  return this;
}

cas = __cas();

