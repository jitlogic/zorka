/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// Common JBoss support functions

__jboss() {

  // Servlets
  __servlet() {

    discovery() {
      return zabbix.discovery("jboss", "jboss.web:j2eeType=Servlet,*",
                 "name", "WebModule", "J2EEServer", "J2EEApplication", "j2eeType");
    }

    // Request count
    requests(server,application,module,name) {
      ret = zorka.jmx("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "requestCount");
      return ret != null ? ret : 0.0;
    }

    // Error count
    errors(server,application,module,name) {
      ret = zorka.jmx("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "errorCount");
      return ret != null ? ret : 0.0;
    }

    // Average processing time
    time(server,application,module,name,horizon) {
      ret = zorka.rate("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name,
        "processingTime", "requestCount", horizon);
      return ret != null ? ret : 0.0;
    }

    return this;
  }

  servlet = __servlet();


  // Catch MX mbean server initialization and register JBoss MBean Server here ...

  __mbsRegister() {

    jbossMbs = null;
    javaMbs = null;

    process(record) {
      synchronized (super) {
        if (super.javaMbs == null) {
          mbs = java.lang.management.ManagementFactory.getPlatformMBeanServer();
          zorka.registerMbs("java", mbs);
          super.javaMbs = mbs;
          zorka.logInfo("Registered platform mbean server as 'java'");
        }
        if (super.jbossMbs == null) {
          mbs = record.get("THIS").getServer();
          //mbs = record.get("MBS");
          ccl = Thread.currentThread().getContextClassLoader();
          zorka.registerMbs("jboss", mbs, ccl);
          super.jbossMbs = mbs;
          zorka.logInfo("Registered JBoss MBean server as 'jboss'");
          if (zorka.boolCfg("jboss.dsquery", false)) {
            super.super.dsquery = __dsquery(ccl);
            zorka.logInfo("Created jboss.dsquery JDBC DataSource interface.");
          }
        }
      }
      return record;
    }
    return this;
  } // __mbsRegister()

  spy.add(spy.instance()
    .onReturn(spy.fetchArg("THIS", 0), (com.jitlogic.zorka.core.spy.SpyProcessor)__mbsRegister())
    .include(spy.byMethod(0, "org.jboss.naming.NamingService", "startService", null)));


  return this;
}


jboss = __jboss();

