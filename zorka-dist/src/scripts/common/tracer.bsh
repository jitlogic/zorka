/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */


if (zorka.boolCfg("tracer", false)) {

  zorka.logInfo("Enabling tracer for JBoss.");
  zorka.loadCfg("tracer.properties");

  for (String pkg : zorka.listCfg("tracer.include.extra")) {
    if (pkg.contains("/")) {
      cm = pkg.split("/");
      zorka.logInfo("Include methods for trace: '" + cm[0] + "' / '" + cm[1] + "'");
      tracer.include(spy.byMethod(cm[0].trim(),cm[1].trim()));
    } else {
      zorka.logInfo("Include classes for trace: '" + pkg + "'");
      tracer.include(spy.byClass(pkg).forTrace());
    }
  }

  for (String pkg : zorka.listCfg("tracer.exclude",
      "com.jitlogic.zorka.**",  "org.jboss.jms.client.delegate.ClientClusteredConnectionFactoryDelegate")) {
    if (pkg.contains("/")) {
      cm = pkg.split("/");
      zorka.logInfo("Exclude methods from trace: '" + cm[0] + "' / '" + cm[1] + "'");
      tracer.exclude(spy.byMethod(cm[0].trim(),cm[1].trim()));
    } else {
      zorka.logInfo("Exclude clases from trace: '" + pkg + "'");
      tracer.exclude(spy.byClass(pkg));
    }
  }

  for (String pkg : zorka.listCfg("tracer.exclude.extra")) {
    if (pkg.contains("/")) {
      cm = pkg.split("/");
      zorka.logInfo("Exclude methods from trace: '" + cm[0] + "' / '" + cm[1] + "'");
      tracer.exclude(spy.byMethod(cm[0].trim(),cm[1].trim()));
    } else {
      zorka.logInfo("Exclude clases from trace: '" + pkg + "'");
      tracer.exclude(spy.byClass(pkg));
    }
  }

  for (String pkg : zorka.listCfg("tracer.include", "**")) {
    if (pkg.contains("/")) {
      cm = pkg.split("/");
      zorka.logInfo("Include methods for trace: '" + cm[0] + "' / '" + cm[1] + "'");
      tracer.include(spy.byMethod(cm[0].trim(),cm[1].trim()));
    } else {
      zorka.logInfo("Include classes for trace: '" + pkg + "'");
      tracer.include(spy.byClass(pkg).forTrace());
    }
  }

  if (zorka.boolCfg("tracer.file", true)) {
    tracer.output(tracer.toFile(
      zorka.stringCfg("tracer.file.path", "${zorka.log.dir}/trace.ztr"),
      zorka.intCfg("tracer.file.fnum", 16),
      zorka.kiloCfg("tracer.file.size", 32*1024*1024),
      zorka.boolCfg("tracer.file.compress", true)));
  }

  if (zorka.boolCfg("tracer.net", false)) {
    tracer.output(tracer.toZico(
      zorka.stringCfg("tracer.net.addr", "127.0.0.1"),
      zorka.intCfg("tracer.net.port", 8640),
      zorka.stringCfg("tracer.net.host", zorka.getHostname()),
      zorka.stringCfg("tracer.net.pass", "changeme"),
      zorka.intCfg("tracer.net.qlen", 64),
      zorka.intCfg("tracer.net.retries", 10),
      zorka.intCfg("tracer.net.retry.time", 125L),
      zorka.intCfg("tracer.net.retry.exp", 2L)));
  }

  if (zorka.hasCfg("tracer.min.method.time")) {
    mmt = zorka.longCfg("tracer.min.method.time", 250000);
    zorka.logInfo("Setting tracer minimum method time to " + mmt + " ns");
    tracer.setTracerMinMethodTime(mmt);
  }

  if (zorka.hasCfg("tracer.min.trace.time")) {
    mtt = zorka.longCfg("tracer.min.trace.time", 100);
    zorka.logInfo("Settting tracer minimum trace time to " + mtt + " ms");
    tracer.setTracerMinTraceTime(mtt);
  }

  if (zorka.hasCfg("tracer.max.trace.records")) {
    mtr = zorka.intCfg("tracer.max.trace.records", 4096);
    zorka.logInfo("Setting maximum records per trace to " + mtr + ".");
    tracer.setTracerMaxTraceRecords(mtr);
  }

}

