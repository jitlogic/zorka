/**
 * Copyright 2012-2013 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */


__sql() {

  zorka.defCfg("sql", "yes");

  // Default values for SQL stats
  zorka.defCfg("sql.stats", "yes");
  zorka.defCfg("sql.stats.congestion", "yes");
  zorka.defCfg("sql.stats.mbean", "zorka:type=ZorkaStats,name=SqlStats");

  // Default values for SQL parameter processing
  zorka.defCfg("sql.params", "no");
  //zorka.defCfg("sql.params.include", "~.*");
  //zorka.defCfg("sql.params.exclude", "");

  // Default values for SQL slow requests log configuration options
  zorka.defCfg("sql.slow", "no");
  zorka.defCfg("sql.slow.time", "5000");
  zorka.defCfg("sql.slow.file", zorka.boolCfg("sql.slow"));
  zorka.defCfg("sql.slow.file.path", zorka.path("${zorka.log.dir}", "sql-slow.log"));
  zorka.defCfg("sql.slow.file.max", "8M");
  zorka.defCfg("sql.slow.file.num", "8");
  zorka.defCfg("sql.slow.format", "[${TIME}] ${DB}: ${SQL}");

  // Default values for SQL error log configuration options
  zorka.defCfg("sql.error", "no");
  zorka.defCfg("sql.error.file", zorka.boolCfg("sql.error"));
  zorka.defCfg("sql.error.file.path", zorka.path("${zorka.log.dir}", "sql-error.log"));
  zorka.defCfg("sql.error.file.max", "8M");
  zorka.defCfg("sql.error.file.num", "8");
  zorka.defCfg("sql.error.format", "[${TIME}] ${URI}${PARAMS} -> ${STATUS}");

  // Default values for SQL tracer options 
  zorka.defCfg("sql.trace", zorka.stringCfg("tracer"));
  zorka.defCfg("sql.trace.time", "1000");
  //zorka.defCfg("sql.trace.params.prefix", "P"); // not implemented yet

  _trace = zorka.boolCfg("sql.trace");
  _stats = zorka.boolCfg("sql.stats");
  _congestion = zorka.boolCfg("sql.stats.congestion");
  _mbean = zorka.stringCfg("sql.stats.mbean");
  _action = _congestion ? spy.ACTION_EXIT|spy.ACTION_STATS : spy.ACTION_STATS;
  _slow = zorka.boolCfg("sql.slow");
  _slowF = _slow && zorka.boolCfg("sql.slow.file");
  _params = zorka.boolCfg("sql.params");
  _prefix = zorka.stringCfg("sql.trace.params.prefix");
  _error = zorka.boolCfg("sql.error");
  _errorF = zorka.boolCfg("sql.error.file");
  _excludedParams = zorka.setCfg("sql.params.exclude");

  slow_ft = _slowF ? zorka.rollingFileTrapper("sql.slow", "INFO", zorka.stringCfg("sql.slow.file.path"),
                     zorka.intCfg("sql.slow.file.num"), zorka.kiloCfg("sql.slow.file.max"), false) : null;

  error_ft = _errorF ? zorka.rollingFileTrapper("sql.error", "INFO", zorka.stringCfg("sql.error.file.path"),
                       zorka.intCfg("sql.error.file.num"), zorka.kiloCfg("sql.error.file.max"), false) : null;

  _errors = zorka.setCfg("sql.error.codes");


  discovery(attr, tag) {
    return zabbix.discovery(zorka.query("java", _mbean, "name", "type").get(attr).listAs("**", tag));
  }

  calls(attr, tag) {
    calls = zorka.jmx("java", _mbean, attr, tag, "calls");
    return calls != null ? calls : 0;
  }

  errors(attr, tag) {
    errors = zorka.jmx("java", _mbean, attr, tag, "errors");
    return errors != null ? errors : 0;
  }

  peak(attr, tag) {
    peak = zorka.jmx("java",  _mbean, attr, tag, "maxTimeCLR");
    return peak != null ? peak : 0;
  }

  threads(attr, tag) {
    threads = zorka.jmx("java",  _mbean, attr, tag, "maxThreadsCLR");
  }

  avg5(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG5");
  }

  avg15(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG15");
  }

  _instrumentStmt(dbform) {
    return spy.instrument()
    .onEnter(spy.fetchArg("THIS", 0), spy.fetchArg("SQL", 1),
      spy.format("DB", dbform),
      _trace ? tracer.attr("SQL", "SQL") : null,
      _trace ? tracer.attr("DB", "DB") : null,
      _trace ? tracer.begin("SQL", zorka.longCfg("sql.trace.time")) : null)
    .onError(spy.fetchError("ERR"),
      spy.trapperCollector(error_ft, zorka.ERROR, "SQL", zorka.stringCfg("sql.error.format"), zorka.stringCfg("sql.error.format"), "ERR"))
    .onSubmit(spy.strTime("TIME"),
      _slow ? spy.subchain(
        spy.longerThan(zorka.longCfg("sql.slow.time")),
        spy.trapperCollector(slow_ft, zorka.INFO, "SQL", zorka.stringCfg("sql.slow.format"))
      ) : null,
      _stats ? spy.zorkaStats("java", _mbean, "ALL", "ALL") : null,
      _stats ? spy.zorkaStats("java", _mbean, "ALL", "${DB}") : null);
  }

  _instrumentPStmt(dbform, sqlform) {
    return spy.instrument()
    .onEnter(spy.fetchArg("THIS", 0),
      spy.format("SQL", sqlform),
      spy.format("DB", dbform),
      _trace ? tracer.attr("SQL", "SQL") : null,
      _trace ? tracer.attr("DB", "DB") : null,
      _trace ? tracer.begin("SQL", zorka.longCfg("sql.trace.time")) : null)
    .onError(spy.fetchError("ERR"),
      spy.trapperCollector(error_ft, zorka.ERROR, "SQL", zorka.stringCfg("sql.error.format"), zorka.stringCfg("sql.error.format"), "ERR"))
    .onSubmit(spy.strTime("TIME"),
      _slow ? spy.subchain(
        spy.longerThan(zorka.longCfg("sql.slow.time")),
        spy.trapperCollector(slow_ft, zorka.INFO, "SQL", zorka.stringCfg("sql.slow.format"))
      ) : null,
      _stats ? spy.zorkaStats("java", _mbean, "ALL", "ALL") : null,
      _stats ? spy.zorkaStats("java", _mbean, "ALL", "${DB}") : null);
  }

  return this;
}

sql = __sql();

